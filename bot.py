"""
SPEAKYZ Telegram bot with full functionality.
Includes admin panel, FAQ, subscription management, and keep-alive system.
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
from config import BOT_TOKEN, WEBSITE_URL, WELCOME_MESSAGE, BUTTON_TEXT, FAQ_URL
from models import create_tables, init_default_faq, User, get_db
from admin import (admin_edit_bot, handle_admin_callback, remove_subscription_command, 
                  is_admin, SUBSCRIPTION_PRICES)
from faq_site import start_faq_site
from datetime import datetime

# Configure logging
logger = logging.getLogger(__name__)

def register_or_update_user(telegram_user):
    """Register or update user in database."""
    db = get_db()

    user = db.query(User).filter(User.telegram_id == telegram_user.id).first()

    if not user:
        # Create new user
        user = User(
            telegram_id=telegram_user.id,
            username=telegram_user.username,
            first_name=telegram_user.first_name,
            last_name=telegram_user.last_name
        )
        db.add(user)
    else:
        # Update existing user
        user.username = telegram_user.username
        user.first_name = telegram_user.first_name
        user.last_name = telegram_user.last_name
        user.updated_at = datetime.utcnow()

    db.commit()
    db.close()
    return user

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handle the /start command.
    Sends welcome message with school photo and website button.
    """
    try:
        user = update.effective_user

        # Register or update user
        register_or_update_user(user)

        # Create keyboard with main options
        keyboard = [
            [InlineKeyboardButton("üéì –ù–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã", callback_data="show_plans")],
            [InlineKeyboardButton("‚ùì FAQ", callback_data="show_faq")],
            [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="my_profile")],
            [InlineKeyboardButton(BUTTON_TEXT, url=WEBSITE_URL)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        logger.info(f"User {user.id} ({user.first_name}) started the bot")

        # Send photo with caption and buttons
        try:
            with open('attached_assets/IMG_20250605_114549_367.jpg', 'rb') as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=WELCOME_MESSAGE,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
        except FileNotFoundError:
            # Fallback to text message if image not found
            await update.message.reply_text(
                WELCOME_MESSAGE,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )

        logger.info(f"Welcome message with photo sent to user {user.id}")

    except Exception as e:
        logger.error(f"Error in start_command: {e}")
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )

async def show_plans(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show subscription plans."""
    query = update.callback_query
    await query.answer()

    text = "üéì **–¢–∞—Ä–∏—Ñ—ã SPEAKYZ**\n\n"
    text += "üÜì **–ë–∞–∑–æ–≤—ã–π ‚Äî Start**\n"
    text += "‚úÖ 2 –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏—è –≤ –Ω–µ–¥–µ–ª—é\n"
    text += "‚úÖ –£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ\n"
    text += "‚úÖ –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π\n"
    text += "‚ùå –ë–µ–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ —Å –Ω–æ—Å–∏—Ç–µ–ª–µ–º\n"
    text += "üìö +40‚Äì60 –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ / –º–µ—Å—è—Ü\n\n"

    text += "‚≠ê **–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π ‚Äî Smart**\n"
    text += "‚úÖ 2 –≥—Ä—É–ø–ø–æ–≤—ã—Ö + 1 —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π –∫–ª—É–± –≤ –Ω–µ–¥–µ–ª—é\n"
    text += "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –î–ó —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é\n"
    text += "‚úÖ –ß–∞—Ç —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º\n"
    text += "üìö +80‚Äì120 –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ / –º–µ—Å—è—Ü\n"
    text += "üí∞ 870,000 UZS / –º–µ—Å—è—Ü\n\n"

    text += "üåü **–ü—Ä–µ–º–∏—É–º ‚Äî Pro+**\n"
    text += "‚úÖ 2 –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö + 2 –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏—è\n"
    text += "‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å\n"
    text += "‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ IELTS / TOEFL\n"
    text += "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n"
    text += "üìö +150‚Äì200 –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ / –º–µ—Å—è—Ü\n"
    text += "üí∞ 1,650,000 UZS / –º–µ—Å—è—Ü\n\n"

    text += "üí¨ **–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π –∫–ª—É–±**\n"
    text += "‚úÖ 1 –≤—Å—Ç—Ä–µ—á–∞ –≤ –Ω–µ–¥–µ–ª—é\n"
    text += "‚úÖ –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∏—Å–∫—É—Å—Å–∏–∏\n"
    text += "üìö +20‚Äì30 –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ / –º–µ—Å—è—Ü\n"
    text += "üí∞ 190,000 UZS / –º–µ—Å—è—Ü"

    keyboard = [
        [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_caption(caption=text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_faq(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show FAQ website link."""
    query = update.callback_query
    await query.answer()

    text = "‚ùì **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã**\n\n"
    text += "–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ:\n"
    text += f"{FAQ_URL}\n\n"
    text += "–¢–∞–º –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ:\n"
    text += "‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è\n"
    text += "‚Ä¢ –¢–∞—Ä–∏—Ñ–∞—Ö –∏ –æ–ø–ª–∞—Ç–µ\n"
    text += "‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤\n"
    text += "‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!"

    keyboard = [
        [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å FAQ", url=FAQ_URL)],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_caption(caption=text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show user profile."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    db = get_db()
    db_user = db.query(User).filter(User.telegram_id == user.id).first()
    db.close()

    if not db_user:
        text = "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
    else:
        text = f"üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
        text += f"–ò–º—è: {db_user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        text += f"Username: @{db_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"

        if db_user.subscription_type:
            sub_name = {
                'start': '–ë–∞–∑–æ–≤—ã–π (Start)',
                'smart': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (Smart)', 
                'pro_plus': '–ü—Ä–µ–º–∏—É–º (Pro+)',
                'speaking_club': '–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π –∫–ª—É–±'
            }.get(db_user.subscription_type, db_user.subscription_type)

            text += f"üìã –ü–æ–¥–ø–∏—Å–∫–∞: {sub_name}\n"
            if db_user.subscription_end:
                text += f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {db_user.subscription_end.strftime('%d.%m.%Y')}\n"
            if db_user.speaking_clubs_count > 0:
                text += f"üí¨ –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã—Ö –∫–ª—É–±–æ–≤: {db_user.speaking_clubs_count}\n"
        else:
            text += "üìã –ü–æ–¥–ø–∏—Å–∫–∞: –ù–µ –∞–∫—Ç–∏–≤–Ω–∞\n"

    keyboard = [
        [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_caption(caption=text, reply_markup=reply_markup, parse_mode='Markdown')

async def buy_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show subscription purchase options."""
    query = update.callback_query
    await query.answer()

    text = "üí≥ **–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏**\n\n"
    text += "–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É Humo:\n"
    text += "`9860 3501 0188 0457`\n\n"
    text += "**–¢–∞—Ä–∏—Ñ—ã:**\n"
    text += "‚Ä¢ Smart: 870,000 UZS\n"
    text += "‚Ä¢ Pro+: 1,650,000 UZS\n"
    text += "‚Ä¢ –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π –∫–ª—É–±: 190,000 UZS\n\n"
    text += "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n\n"
    text += "‚ùì **–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π?**\n"
    text += "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @Dream565758"

    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="show_plans")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_caption(caption=text, reply_markup=reply_markup, parse_mode='Markdown')

async def faq_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /faq command."""
    keyboard = [
        [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å FAQ —Å–∞–π—Ç", url=FAQ_URL)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "‚ùì **FAQ - –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã**\n\n–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –æ—Ç–≤–µ—Ç–æ–≤:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Return to main menu from callback query."""
    query = update.callback_query
    await query.answer()

    user = query.from_user

    # Register or update user
    register_or_update_user(user)

    # Create keyboard with main options
    keyboard = [
        [InlineKeyboardButton("üéì –ù–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã", callback_data="show_plans")],
        [InlineKeyboardButton("‚ùì FAQ", callback_data="show_faq")],
        [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="my_profile")],
        [InlineKeyboardButton(BUTTON_TEXT, url=WEBSITE_URL)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        # Check if message has photo (caption) or text
        if query.message.photo:
            await query.edit_message_caption(
                caption=WELCOME_MESSAGE,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await query.edit_message_text(
                text=WELCOME_MESSAGE,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"Error editing message: {e}")
        # Fallback: delete and send new message
        try:
            await query.delete_message()
            try:
                with open('attached_assets/IMG_20250605_114549_367.jpg', 'rb') as photo:
                    await context.bot.send_photo(
                        chat_id=query.message.chat_id,
                        photo=photo,
                        caption=WELCOME_MESSAGE,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
            except FileNotFoundError:
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=WELCOME_MESSAGE,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
        except Exception as e2:
            logger.error(f"Error in fallback: {e2}")
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle all callback queries."""
    query = update.callback_query
    data = query.data

    try:
        # Admin callbacks
        if data.startswith("admin_"):
            await handle_admin_callback(update, context)
            return

        # Main bot callbacks
        if data == "show_plans":
            await show_plans(update, context)
        elif data == "show_faq":
            await show_faq(update, context)
        elif data == "my_profile":
            await show_profile(update, context)
        elif data == "buy_subscription":
            await buy_subscription(update, context)
        elif data == "back_to_main":
            await back_to_main(update, context)
        else:
            await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    except Exception as e:
        logger.error(f"Error in callback query handler: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle the /help command."""
    user = update.effective_user
    help_text = """
ü§ñ **–ö–æ–º–∞–Ω–¥—ã SPEAKYZ –±–æ—Ç–∞:**

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/faq - –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
@Dream565758

üåê **–°–∞–π—Ç —à–∫–æ–ª—ã:**
https://sites.google.com/view/wwwspeakzycom
    """

    # Add admin commands for admin users
    if is_admin(user):
        help_text += "\n\nüîß **–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n"
        help_text += "/admineditbot - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        help_text += "/remove_subscription @username - –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"

    await update.message.reply_text(help_text, parse_mode='Markdown')

async def add_faq_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Add new FAQ entry."""
    user = update.effective_user

    if not is_admin(user):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_faq –í–æ–ø—Ä–æ—Å | –û—Ç–≤–µ—Ç")
        return

    text = " ".join(context.args)
    if "|" not in text:
        await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_faq –í–æ–ø—Ä–æ—Å | –û—Ç–≤–µ—Ç")
        return

    question, answer = text.split("|", 1)
    question = question.strip()
    answer = answer.strip()

    if not question or not answer:
        await update.message.reply_text("–í–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.")
        return

    try:
        from models import FAQ
        db = get_db()
        new_faq = FAQ(question=question, answer=answer, created_by=user.id)
        db.add(new_faq)
        db.commit()
        db.close()

        await update.message.reply_text(f"‚úÖ FAQ –¥–æ–±–∞–≤–ª–µ–Ω:\n\n**–í–æ–ø—Ä–æ—Å:** {question}\n**–û—Ç–≤–µ—Ç:** {answer}", parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error adding FAQ: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ FAQ.")

async def edit_faq_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Edit existing FAQ entry."""
    user = update.effective_user

    if not is_admin(user):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /edit_faq ID –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å | –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç")
        return

    try:
        faq_id = int(context.args[0])
        text = " ".join(context.args[1:])

        if "|" not in text:
            await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /edit_faq ID –í–æ–ø—Ä–æ—Å | –û—Ç–≤–µ—Ç")
            return

        question, answer = text.split("|", 1)
        question = question.strip()
        answer = answer.strip()

        from models import FAQ
        db = get_db()
        faq = db.query(FAQ).filter(FAQ.id == faq_id).first()

        if not faq:
            await update.message.reply_text(f"‚ùå FAQ —Å ID {faq_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            db.close()
            return

        faq.question = question
        faq.answer = answer
        db.commit()
        db.close()

        await update.message.reply_text(f"‚úÖ FAQ –æ–±–Ω–æ–≤–ª–µ–Ω:\n\n**–í–æ–ø—Ä–æ—Å:** {question}\n**–û—Ç–≤–µ—Ç:** {answer}", parse_mode='Markdown')

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID FAQ.")
    except Exception as e:
        logger.error(f"Error editing FAQ: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ FAQ.")

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle unknown commands."""
    await update.message.reply_text(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–ª–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏."
    )

def start_bot():
    """
    Initialize and start the Telegram bot with full functionality.
    """
    try:
        # Check BOT_TOKEN
        if not BOT_TOKEN:
            logger.error("BOT_TOKEN is required to start the bot")
            return

        # Initialize database
        if not create_tables():
            logger.error("Failed to initialize database")
            return

        init_default_faq()
        logger.info("Database initialized successfully")

        # Start FAQ website
        start_faq_site()

        # Create application
        application = Application.builder().token(BOT_TOKEN).build()

        # Add command handlers
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("faq", faq_command))
        application.add_handler(CommandHandler("admineditbot", admin_edit_bot))
        application.add_handler(CommandHandler("remove_subscription", remove_subscription_command))
        application.add_handler(CommandHandler("add_faq", add_faq_command))
        application.add_handler(CommandHandler("edit_faq", edit_faq_command))

        # Add callback query handler
        application.add_handler(CallbackQueryHandler(handle_callback_query))

        # Add handler for unknown commands (must be last)
        application.add_handler(MessageHandler(filters.COMMAND, unknown_command))

        logger.info("Bot handlers registered successfully")

        # Start the bot with optimized polling settings for continuous operation
        logger.info("Starting SPEAKYZ bot polling...")
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES,
            pool_timeout=20,  # Reduced for better handling
            read_timeout=20,  # Reduced for better stability
            write_timeout=20,  # Reduced for better stability
            connect_timeout=20,  # Reduced for better connection handling
            close_loop=False  # Keep event loop open
        )

    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        raise

if __name__ == "__main__":
    start_bot()